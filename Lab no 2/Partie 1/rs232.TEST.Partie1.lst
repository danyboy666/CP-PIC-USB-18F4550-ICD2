CCS PCH C Compiler, Version 4.062, 41466               09-févr.-12 15:15

               Filename: C:\Users\Etudiant\Desktop\243-444-RK\Lab no 2\rs232.TEST.Partie1.lst

               ROM used: 646 bytes (2%)
                         Largest free fragment is 32122
               RAM used: 7 (0%) at main() level
                         16 (1%) worst case
               Stack:    2 locations

*
0000:  GOTO   0190
.................... #include "rs232.TEST.Partie1.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES LVP                   	//Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
0070:  CLRF   FEA
0072:  MOVLW  08
0074:  MOVWF  FE9
0076:  MOVF   FEF,W
0078:  BZ    0094
007A:  MOVLW  06
007C:  MOVWF  01
007E:  CLRF   00
0080:  DECFSZ 00,F
0082:  BRA    0080
0084:  DECFSZ 01,F
0086:  BRA    007E
0088:  MOVLW  7B
008A:  MOVWF  00
008C:  DECFSZ 00,F
008E:  BRA    008C
0090:  DECFSZ FEF,F
0092:  BRA    007A
0094:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #include <lcd.c> //Pilote LCD. 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_cycles(1); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(1); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_lcd(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(2); 
....................       lcd.enable = 0; 
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
....................       lcd.rs = address; 
....................       delay_cycles(1); 
....................       lcd.rw = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 0; 
....................       lcd_send_nibble(n >> 4); 
....................       lcd_send_nibble(n & 0xf); 
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
....................     lcd.rs = 0; 
....................     lcd.rw = 0; 
....................     lcd.enable = 0; 
....................     delay_ms(15); 
....................     for(i=1;i<=3;++i) { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................     } 
....................     lcd_send_nibble(2); 
....................     for(i=0;i<=3;++i) 
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
....................      address=lcd_line_two; 
....................    else 
....................      address=0; 
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
....................      case '\f'   : lcd_send_byte(0,1); 
....................                    delay_ms(2); 
....................                                            break; 
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
....................      default     : lcd_send_byte(1,c);     break; 
....................    } 
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... void main() 
.................... { 
*
0190:  CLRF   FF8
0192:  BCF    FD0.7
0194:  CLRF   FEA
0196:  CLRF   FE9
0198:  BSF    FB8.3
019A:  MOVLW  08
019C:  MOVWF  FAF
019E:  MOVLW  02
01A0:  MOVWF  FB0
01A2:  MOVLW  A6
01A4:  MOVWF  FAC
01A6:  MOVLW  90
01A8:  MOVWF  FAB
01AA:  MOVF   FC1,W
01AC:  ANDLW  C0
01AE:  IORLW  0F
01B0:  MOVWF  FC1
01B2:  MOVLW  07
01B4:  MOVWF  FB4
....................    char Dat; 
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
01B6:  MOVF   FC1,W
01B8:  ANDLW  C0
01BA:  IORLW  0F
01BC:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
01BE:  BCF    FC2.0
....................    setup_psp(PSP_DISABLED); 
01C0:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
01C2:  BCF    FC6.5
01C4:  BCF    F94.7
01C6:  BSF    F93.0
01C8:  BCF    F93.1
01CA:  MOVLW  01
01CC:  MOVWF  FC6
01CE:  MOVLW  00
01D0:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
01D2:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
01D4:  MOVLW  80
01D6:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
01D8:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
01DA:  MOVLW  00
01DC:  MOVWF  FCA
01DE:  MOVLW  00
01E0:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
01E2:  MOVLW  07
01E4:  MOVWF  FB4
01E6:  MOVF   F92,W
01E8:  MOVLW  10
01EA:  MOVWF  00
01EC:  DECFSZ 00,F
01EE:  BRA    01EC
01F0:  NOP   
01F2:  MOVF   FB4,W
01F4:  BCF    FA1.6
....................    setup_vref(FALSE); 
01F6:  CLRF   FB5
....................  
....................   dat =0; 
01F8:  CLRF   06
....................   printf("%c%c",0xfe,0x1);   //efface l'affichace et met le curseur au début de la ligne:1 
01FA:  MOVLW  FE
01FC:  BTFSS  F9E.4
01FE:  BRA    01FC
0200:  MOVWF  FAD
0202:  MOVLW  01
0204:  BTFSS  F9E.4
0206:  BRA    0204
0208:  MOVWF  FAD
....................   printf(" TEST RS232 et SLCD\n\r  sur PIC 18F4550\n\rLab 2a cours:243-444");   //important 20 caractères par ligne 
020A:  CLRF   07
020C:  MOVF   07,W
020E:  RCALL  0004
0210:  INCF   07,F
0212:  MOVWF  00
0214:  MOVF   00,W
0216:  BTFSS  F9E.4
0218:  BRA    0216
021A:  MOVWF  FAD
021C:  MOVLW  3C
021E:  SUBWF  07,W
0220:  BNZ   020C
....................   delay_MS(3000); 
0222:  MOVLW  0C
0224:  MOVWF  07
0226:  MOVLW  FA
0228:  MOVWF  08
022A:  RCALL  0070
022C:  DECFSZ 07,F
022E:  BRA    0226
....................  
....................    While (true) 
....................    { 
....................       if (dat == 255) dat =0 ; 
0230:  INCFSZ 06,W
0232:  BRA    0236
0234:  CLRF   06
....................       dat = dat +1; 
0236:  MOVLW  01
0238:  ADDWF  06,F
....................       printf("%c%c",0xfe,0xd9);   // met le curseur au 6 caractères de la ligne:4, référence: melab Serial LCD 
023A:  MOVLW  FE
023C:  BTFSS  F9E.4
023E:  BRA    023C
0240:  MOVWF  FAD
0242:  MOVLW  D9
0244:  BTFSS  F9E.4
0246:  BRA    0244
0248:  MOVWF  FAD
....................       printf("valeur = %d ",dat);   // envoie dat sur le port RS232 TX 
024A:  CLRF   07
024C:  MOVF   07,W
024E:  RCALL  0052
0250:  INCF   07,F
0252:  MOVWF  00
0254:  MOVF   00,W
0256:  BTFSS  F9E.4
0258:  BRA    0256
025A:  MOVWF  FAD
025C:  MOVLW  09
025E:  SUBWF  07,W
0260:  BNZ   024C
0262:  MOVFF  06,08
0266:  MOVLW  1F
0268:  MOVWF  09
026A:  BRA    00BE
026C:  MOVLW  20
026E:  BTFSS  F9E.4
0270:  BRA    026E
0272:  MOVWF  FAD
....................       delay_MS(1000);      
0274:  MOVLW  04
0276:  MOVWF  07
0278:  MOVLW  FA
027A:  MOVWF  08
027C:  RCALL  0070
027E:  DECFSZ 07,F
0280:  BRA    0278
....................    } 
0282:  BRA    0230
.................... } 
....................  
0284:  SLEEP 

Configuration Fuses:
   Word  1: CC3F   IESO FCMEN HS PLL12 CPUDIV4 USBDIV
   Word  2: 0E3F   BROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A5   STVREN NODEBUG LVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
