CCS PCH C Compiler, Version 4.062, 41466               09-févr.-12 15:50

               Filename: C:\Users\Etudiant\Desktop\243-444-RK\Lab no 2\Partie 2\rs232.TEST.Partie2.lst

               ROM used: 624 bytes (2%)
                         Largest free fragment is 32140
               RAM used: 60 (3%) at main() level
                         64 (3%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  GOTO   0182
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  F9D.5
004E:  GOTO   0058
0052:  BTFSC  F9E.5
0054:  GOTO   0100
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //            Applications des microcontrolleurs        243-444-RK           // 
.................... //                            Laboratoire no. 2                              // 
.................... // Programme no 2: Expérimentation du protocole RS232.                       // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Copyright: Dany Ferron 2012                                               // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include "rs232.TEST.Partie2.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES LVP                   	//Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
0132:  CLRF   FEA
0134:  MOVLW  3C
0136:  MOVWF  FE9
0138:  MOVF   FEF,W
013A:  BZ    0156
013C:  MOVLW  06
013E:  MOVWF  01
0140:  CLRF   00
0142:  DECFSZ 00,F
0144:  BRA    0142
0146:  DECFSZ 01,F
0148:  BRA    0140
014A:  MOVLW  7B
014C:  MOVWF  00
014E:  DECFSZ 00,F
0150:  BRA    014E
0152:  DECFSZ FEF,F
0154:  BRA    013C
0156:  GOTO   0254 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_cycles(1); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(1); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_lcd(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(2); 
....................       lcd.enable = 0; 
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
....................       lcd.rs = address; 
....................       delay_cycles(1); 
....................       lcd.rw = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 0; 
....................       lcd_send_nibble(n >> 4); 
....................       lcd_send_nibble(n & 0xf); 
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
....................     lcd.rs = 0; 
....................     lcd.rw = 0; 
....................     lcd.enable = 0; 
....................     delay_ms(15); 
....................     for(i=1;i<=3;++i) { 
....................        lcd_send_nibble(3); 
....................        delay_ms(5); 
....................     } 
....................     lcd_send_nibble(2); 
....................     for(i=0;i<=3;++i) 
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
....................      address=lcd_line_two; 
....................    else 
....................      address=0; 
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
....................      case '\f'   : lcd_send_byte(0,1); 
....................                    delay_ms(2); 
....................                                            break; 
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
....................      default     : lcd_send_byte(1,c);     break; 
....................    } 
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... #define BUFFER_SIZE 32 
.................... BYTE buffer[BUFFER_SIZE]; 
.................... BYTE next_in = 0; 
.................... BYTE next_out = 0; 
.................... BYTE n = 0; 
....................  
.................... #int_rda                                           //interruption RS232 Recevoir des données disponible 
.................... void serial_isr() {                            // directive précisant la fonction d'interruption 
....................    int t; 
....................    buffer[next_in]=getc(); 
*
0100:  CLRF   03
0102:  MOVF   38,W
0104:  ADDLW  18
0106:  MOVWF  FE9
0108:  MOVLW  00
010A:  ADDWFC 03,W
010C:  MOVWF  FEA
010E:  BTFSS  F9E.5
0110:  BRA    010E
0112:  MOVFF  FAE,FEF
....................    t=next_in; 
0116:  MOVFF  38,3D
....................    next_in=(next_in+1) % BUFFER_SIZE; 
011A:  MOVLW  01
011C:  ADDWF  38,W
011E:  ANDLW  1F
0120:  MOVWF  38
....................    if(next_in==next_out) next_in=t;           // Buffer full !! 
0122:  MOVF   39,W
0124:  SUBWF  38,W
0126:  BNZ   012C
0128:  MOVFF  3D,38
.................... } 
....................  
.................... #define bkbhit (next_in!=next_out) 
....................  
012C:  BCF    F9E.5
012E:  GOTO   0058
.................... BYTE bgetc() { 
....................    BYTE c; 
....................    while(!bkbhit) ; 
*
015A:  MOVF   39,W
015C:  SUBWF  38,W
015E:  BZ    015A
....................    c=buffer[next_out];    
0160:  CLRF   03
0162:  MOVF   39,W
0164:  ADDLW  18
0166:  MOVWF  FE9
0168:  MOVLW  00
016A:  ADDWFC 03,W
016C:  MOVWF  FEA
016E:  MOVFF  FEF,3B
....................    next_out=(next_out+1) % BUFFER_SIZE; 
0172:  MOVLW  01
0174:  ADDWF  39,W
0176:  ANDLW  1F
0178:  MOVWF  39
....................    return(c); 
017A:  MOVFF  3B,01
.................... } 
017E:  GOTO   0260 (RETURN)
....................  
....................  
.................... void main() 
.................... { 
0182:  CLRF   FF8
0184:  BCF    FD0.7
0186:  BSF    0D.7
0188:  CLRF   FEA
018A:  CLRF   FE9
018C:  BSF    FB8.3
018E:  MOVLW  08
0190:  MOVWF  FAF
0192:  MOVLW  02
0194:  MOVWF  FB0
0196:  MOVLW  A6
0198:  MOVWF  FAC
019A:  MOVLW  90
019C:  MOVWF  FAB
019E:  MOVF   FC1,W
01A0:  ANDLW  C0
01A2:  IORLW  0F
01A4:  MOVWF  FC1
01A6:  MOVLW  07
01A8:  MOVWF  FB4
01AA:  CLRF   38
01AC:  CLRF   39
01AE:  CLRF   3A
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
01B0:  MOVF   FC1,W
01B2:  ANDLW  C0
01B4:  IORLW  0F
01B6:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
01B8:  BCF    FC2.0
....................    setup_psp(PSP_DISABLED); 
01BA:  BCF    F96.4
....................    setup_spi(FALSE); 
01BC:  BCF    FC6.5
01BE:  BCF    F94.7
01C0:  BSF    F93.0
01C2:  BCF    F93.1
01C4:  MOVLW  00
01C6:  MOVWF  FC6
01C8:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
01CA:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
01CC:  MOVLW  80
01CE:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
01D0:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
01D2:  MOVLW  00
01D4:  MOVWF  FCA
01D6:  MOVLW  00
01D8:  MOVWF  FCB
....................    setup_comparator(NC_NC_NC_NC); 
01DA:  MOVLW  07
01DC:  MOVWF  FB4
01DE:  MOVF   F92,W
01E0:  MOVLW  10
01E2:  MOVWF  00
01E4:  DECFSZ 00,F
01E6:  BRA    01E4
01E8:  NOP   
01EA:  MOVF   FB4,W
01EC:  BCF    FA1.6
....................    setup_vref(FALSE); 
01EE:  CLRF   FB5
....................    enable_interrupts(INT_RDA); 
01F0:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
01F2:  MOVLW  C0
01F4:  IORWF  FF2,F
....................    setup_oscillator(False); 
01F6:  CLRF   FD3
01F8:  MOVF   FD3,W
....................     
....................    printf("%c%c",0xfe,0x1); 
01FA:  MOVLW  FE
01FC:  BTFSS  F9E.4
01FE:  BRA    01FC
0200:  MOVWF  FAD
0202:  MOVLW  01
0204:  BTFSS  F9E.4
0206:  BRA    0204
0208:  MOVWF  FAD
....................    printf("Lab 2a cours:243-444"); 
020A:  CLRF   3B
020C:  MOVF   3B,W
020E:  RCALL  009E
0210:  INCF   3B,F
0212:  MOVWF  00
0214:  MOVF   00,W
0216:  BTFSS  F9E.4
0218:  BRA    0216
021A:  MOVWF  FAD
021C:  MOVLW  14
021E:  SUBWF  3B,W
0220:  BNZ   020C
....................    printf("%c%c",0xfe,0xc0); 
0222:  MOVLW  FE
0224:  BTFSS  F9E.4
0226:  BRA    0224
0228:  MOVWF  FAD
022A:  MOVLW  C0
022C:  BTFSS  F9E.4
022E:  BRA    022C
0230:  MOVWF  FAD
....................    printf("attente de reception\n\r"); 
0232:  CLRF   3B
0234:  MOVF   3B,W
0236:  RCALL  00CE
0238:  INCF   3B,F
023A:  MOVWF  00
023C:  MOVF   00,W
023E:  BTFSS  F9E.4
0240:  BRA    023E
0242:  MOVWF  FAD
0244:  MOVLW  16
0246:  SUBWF  3B,W
0248:  BNZ   0234
....................    delay_ms(300); 
024A:  MOVLW  02
024C:  MOVWF  3B
024E:  MOVLW  96
0250:  MOVWF  3C
0252:  BRA    0132
0254:  DECFSZ 3B,F
0256:  BRA    024E
....................    do { 
....................       while(bkbhit)   putc( bgetc() ); 
0258:  MOVF   39,W
025A:  SUBWF  38,W
025C:  BZ    026C
025E:  BRA    015A
0260:  MOVF   01,W
0262:  MOVWF  3B
0264:  BTFSS  F9E.4
0266:  BRA    0264
0268:  MOVWF  FAD
026A:  BRA    0258
....................       n=n+1; 
026C:  MOVLW  01
026E:  ADDWF  3A,F
....................    } while (TRUE); 
.................... } 
0270:  BRA    0258
....................  
0272:  SLEEP 

Configuration Fuses:
   Word  1: CC3F   IESO FCMEN HS PLL12 CPUDIV4 USBDIV
   Word  2: 0E3F   BROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A5   STVREN NODEBUG LVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
