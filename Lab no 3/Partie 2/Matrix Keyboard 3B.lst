CCS PCH C Compiler, Version 4.062, 41466               24-févr.-12 14:10

               Filename: C:\Users\Etudiant\Desktop\243-444-RK\Lab no 3\Partie 2\Matrix Keyboard 3B.lst

               ROM used: 1400 bytes (4%)
                         Largest free fragment is 31364
               RAM used: 27 (1%) at main() level
                         40 (2%) worst case
               Stack:    5 worst case (1 in main + 4 for interrupts)

*
0000:  GOTO   0436
*
0008:  MOVWF  05
000A:  MOVFF  FD8,06
000E:  MOVFF  FE0,07
0012:  MOVLB  0
0014:  MOVFF  FE9,0D
0018:  MOVFF  FEA,08
001C:  MOVFF  FE1,09
0020:  MOVFF  FE2,0A
0024:  MOVFF  FD9,0B
0028:  MOVFF  FDA,0C
002C:  MOVFF  FF3,14
0030:  MOVFF  FF4,15
0034:  MOVFF  FFA,16
0038:  MOVFF  00,0F
003C:  MOVFF  01,10
0040:  MOVFF  02,11
0044:  MOVFF  03,12
0048:  MOVFF  04,13
004C:  BTFSS  FF0.4
004E:  GOTO   0058
0052:  BTFSC  FF0.1
0054:  GOTO   0402
0058:  MOVFF  0F,00
005C:  MOVFF  10,01
0060:  MOVFF  11,02
0064:  MOVFF  12,03
0068:  MOVFF  13,04
006C:  BSF    0E.7
006E:  MOVFF  0D,FE9
0072:  MOVFF  08,FEA
0076:  MOVFF  09,FE1
007A:  MOVFF  0A,FE2
007E:  MOVFF  0B,FD9
0082:  MOVFF  0C,FDA
0086:  MOVFF  14,FF3
008A:  MOVFF  15,FF4
008E:  MOVFF  16,FFA
0092:  MOVF   05,W
0094:  MOVFF  07,FE0
0098:  MOVFF  06,FD8
009C:  RETFIE 0
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //            Applications des microcontrolleurs        243-444-RK           // 
.................... //                            Laboratoire no. 3                              // 
.................... // Programme no 2: Expérimentation avec clavier matriciel geré par           // 
.................... //                  interruptions.                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                           // 
.................... // Copyright: Dany Ferron 2012                                               // 
.................... //                                                                           // 
.................... /////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include "Matrix Keyboard 3B.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES LVP                   	//Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
040E:  CLRF   FEA
0410:  MOVLW  1A
0412:  MOVWF  FE9
0414:  MOVF   FEF,W
0416:  BZ    0432
0418:  MOVLW  06
041A:  MOVWF  01
041C:  CLRF   00
041E:  DECFSZ 00,F
0420:  BRA    041E
0422:  DECFSZ 01,F
0424:  BRA    041C
0426:  MOVLW  7B
0428:  MOVWF  00
042A:  DECFSZ 00,F
042C:  BRA    042A
042E:  DECFSZ FEF,F
0430:  BRA    0418
0432:  GOTO   0552 (RETURN)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #include "CLAVIER16T c-a interruption.c" 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////////// 
.................... ////                           CLAVIER16T c-a interruption.c                   //// 
.................... ////     Clavier matriciel gérer par une interruption matérielle              //// 
.................... ////                           Utilise le port D  du 16F4550                     ////  
.................... ////           kbd_getc();               // appelle la fonction                  //// 
.................... ////          char kbd_getc( )     // retourne le caractère entrée   //// 
.................... ////                                                                                                //// 
.................... ////        Auteur : Paul Bernard                                                   //// 
.................... ////                                                                                             //// 
.................... ///////////////////////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #byte kbd = 0xF83                  // adresse du porB= F81h, du porD = F83h 
....................  
.................... // #define constante équivalence elles sont remplacées par leur valeur lors de la compilation 
.................... #define set_tris_kbd(x) set_tris_d(x)      // configuration du port 0=ouput, 1=input 
....................  
.................... #define COL0 (1 << 4)           // COL0=décalage à gauche de 4 bit : 0001 0000 
.................... #define COL1 (1 << 5)           // COL1=décalage à gauche de 5 bit : 0010 0000 
.................... #define COL2 (1 << 6)           // COL2=décalage à gauche de 6 bit : 0100 0000 
.................... #define COL3 (1 << 7)           // COL3=décalage à gauche de 7 bit : 1000 0000 
....................  
.................... #define ROW0 (1 << 0)           // ROW0=décalage à gauche de 0 bit : 0000 0001 
.................... #define ROW1 (1 << 1)           // ROW1=décalage à gauche de 1 bit : 0000 0010    
.................... #define ROW2 (1 << 2)           // ROW2=décalage à gauche de 2 bit : 0000 0100 
.................... #define ROW3 (1 << 3)           // ROW3=décalage à gauche de 3 bit : 0000 1000 
....................  
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3)                // All_ROWS=0000 1111 le résultat du OU entre Bits des vars ROWx 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3)  //ALL_PINS=1111 1111 le résultat du OU entre Bits des vars ROWx et colx 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] ={{'1','4','7','a'},    //  déclaration d'un tableau de  
....................                                           {'2','5','8','0'},    //  caractères de votre clavier 
....................                                           {'3','6','9','b'},   //  ( 4 lignes 4 rangées) 
....................                                           {'*','/','-','+'}}; 
.................... char kbd_getc( ) {     // retourne le caractère entrée 
....................    
....................    static BYTE col; 
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0';     // la variable=une chaine nulle  
*
02D2:  CLRF   1B
....................    For (col=0; col<5; ++col){ 
02D4:  CLRF   18
02D6:  MOVF   18,W
02D8:  SUBLW  04
02DA:  BTFSS  FD8.0
02DC:  BRA    03D4
....................       switch (col) {                                 // exécute l'instruction selon la valeur de col 
02DE:  MOVF   18,W
02E0:  ADDLW  FC
02E2:  BC    030A
02E4:  ADDLW  04
02E6:  GOTO   03E0
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0);   // &~ : ET logique avec le complément 1 de COL0 
02EA:  MOVLW  EF
02EC:  MOVWF  F95
....................                     kbd=~COL0&ALL_PINS;   // Le portB =~ le comp 1 de COL1 ET ALL_PIN 
02EE:  MOVWF  F83
....................                     break;   // On sort de sa structure switch 
02F0:  BRA    030A
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
02F2:  MOVLW  DF
02F4:  MOVWF  F95
....................                     kbd=~COL1&ALL_PINS; 
02F6:  MOVWF  F83
....................                     break; 
02F8:  BRA    030A
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
02FA:  MOVLW  BF
02FC:  MOVWF  F95
....................                     kbd=~COL2&ALL_PINS; 
02FE:  MOVWF  F83
....................                     break; 
0300:  BRA    030A
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
0302:  MOVLW  7F
0304:  MOVWF  F95
....................                     kbd=~COL3&ALL_PINS; 
0306:  MOVWF  F83
....................                     break; 
0308:  BRA    030A
....................       }   
....................       if((kbd & (ALL_ROWS))!=(ALL_ROWS)) {   // si (le portb ET logique 0000 1111) n'égale pas  0000 1111  
030A:  MOVF   F83,W
030C:  ANDLW  0F
030E:  SUBLW  0F
0310:  BZ    03D0
....................          if((kbd & ROW0)==0)  row=0;   // choix de la rangée 
0312:  MOVF   F83,W
0314:  ANDLW  01
0316:  BNZ   031C
0318:  CLRF   1C
....................          else if((kbd & ROW1)==0) row=1; 
031A:  BRA    033E
031C:  MOVF   F83,W
031E:  ANDLW  02
0320:  BNZ   0328
0322:  MOVLW  01
0324:  MOVWF  1C
....................          else if((kbd & ROW2)==0) row=2; 
0326:  BRA    033E
0328:  MOVF   F83,W
032A:  ANDLW  04
032C:  BNZ   0334
032E:  MOVLW  02
0330:  MOVWF  1C
....................          else if((kbd & ROW3)==0) row=3; 
0332:  BRA    033E
0334:  MOVF   F83,W
0336:  ANDLW  08
0338:  BNZ   033E
033A:  MOVLW  03
033C:  MOVWF  1C
....................          kchar =KEYS[row][col-1]; 
033E:  MOVF   1C,W
0340:  MULLW  04
0342:  MOVF   FF3,W
0344:  CLRF   1E
0346:  MOVWF  1D
0348:  MOVLW  01
034A:  SUBWF  18,W
034C:  CLRF   03
034E:  ADDWF  1D,W
0350:  MOVWF  01
0352:  MOVF   1E,W
0354:  ADDWFC 03,F
0356:  MOVF   01,W
0358:  MOVFF  FF2,20
035C:  BCF    FF2.7
035E:  RCALL  009E
0360:  BTFSC  20.7
0362:  BSF    FF2.7
0364:  MOVWF  1B
....................           
....................          printf("%c%c",0xfe,0x94); 
0366:  MOVLW  FE
0368:  BTFSS  F9E.4
036A:  BRA    0368
036C:  MOVWF  FAD
036E:  MOVLW  94
0370:  BTFSS  F9E.4
0372:  BRA    0370
0374:  MOVWF  FAD
....................          printf("ranger = %1d",col-1); 
0376:  MOVLW  01
0378:  SUBWF  18,W
037A:  MOVWF  1D
037C:  CLRF   1E
037E:  MOVF   1E,W
0380:  RCALL  00BE
0382:  INCF   1E,F
0384:  MOVWF  00
0386:  MOVF   00,W
0388:  BTFSS  F9E.4
038A:  BRA    0388
038C:  MOVWF  FAD
038E:  MOVLW  09
0390:  SUBWF  1E,W
0392:  BNZ   037E
0394:  MOVFF  1D,1F
0398:  MOVLW  18
039A:  MOVWF  20
039C:  BRA    0192
....................          printf("%c%c",0xfe,0xd4); 
039E:  MOVLW  FE
03A0:  BTFSS  F9E.4
03A2:  BRA    03A0
03A4:  MOVWF  FAD
03A6:  MOVLW  D4
03A8:  BTFSS  F9E.4
03AA:  BRA    03A8
03AC:  MOVWF  FAD
....................          printf("Colone = %u",row); 
03AE:  CLRF   1D
03B0:  MOVF   1D,W
03B2:  RCALL  00DC
03B4:  INCF   1D,F
03B6:  MOVWF  00
03B8:  MOVF   00,W
03BA:  BTFSS  F9E.4
03BC:  BRA    03BA
03BE:  MOVWF  FAD
03C0:  MOVLW  09
03C2:  SUBWF  1D,W
03C4:  BNZ   03B0
03C6:  MOVFF  1C,1E
03CA:  MOVLW  1B
03CC:  MOVWF  1F
03CE:  BRA    0264
....................       } 
....................    } 
03D0:  INCF   18,F
03D2:  BRA    02D6
....................    set_tris_kbd(ALL_PINS);   // configuration du portB en I/O selon la variable ALL_PINS   
03D4:  MOVLW  FF
03D6:  MOVWF  F95
....................    return(kchar); 
03D8:  MOVFF  1B,01
.................... } 
03DC:  GOTO   0404 (RETURN)
....................  
.................... #rom int8 0xF00000={4,3,2,1} 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... CHAR K ; 
....................  
.................... #int_EXT2    // utilisation de l'interruption EXT2 cablé sur le portB bit 2 
.................... void  EXT2_isr(void) {   // Si une interruption se produit les instructions seront exécutées    
....................    k=kbd_getc( ); 
*
0402:  BRA    02D2
0404:  MOVFF  01,19
.................... } 
....................  
0408:  BCF    FF0.1
040A:  GOTO   0058
.................... void main() 
.................... { 
*
0436:  CLRF   FF8
0438:  BCF    FD0.7
043A:  BSF    0D.7
043C:  CLRF   FEA
043E:  CLRF   FE9
0440:  BSF    FB8.3
0442:  MOVLW  08
0444:  MOVWF  FAF
0446:  MOVLW  02
0448:  MOVWF  FB0
044A:  MOVLW  A6
044C:  MOVWF  FAC
044E:  MOVLW  90
0450:  MOVWF  FAB
0452:  MOVF   FC1,W
0454:  ANDLW  C0
0456:  IORLW  0F
0458:  MOVWF  FC1
045A:  MOVLW  07
045C:  MOVWF  FB4
045E:  CLRF   18
....................  
....................     
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
0460:  MOVF   FC1,W
0462:  ANDLW  C0
0464:  IORLW  0F
0466:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
0468:  BCF    FC2.0
....................    setup_psp(PSP_DISABLED); 
046A:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
046C:  BCF    FC6.5
046E:  BCF    F94.7
0470:  BSF    F93.0
0472:  BCF    F93.1
0474:  MOVLW  01
0476:  MOVWF  FC6
0478:  MOVLW  00
047A:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
047C:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
047E:  MOVLW  80
0480:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0482:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0484:  MOVLW  00
0486:  MOVWF  FCA
0488:  MOVLW  00
048A:  MOVWF  FCB
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
048C:  MOVF   FB1,W
048E:  ANDLW  48
0490:  MOVWF  FB1
....................    setup_comparator(NC_NC_NC_NC); 
0492:  MOVLW  07
0494:  MOVWF  FB4
0496:  MOVF   F92,W
0498:  MOVLW  10
049A:  MOVWF  00
049C:  DECFSZ 00,F
049E:  BRA    049C
04A0:  NOP   
04A2:  MOVF   FB4,W
04A4:  BCF    FA1.6
....................    setup_vref(FALSE); 
04A6:  CLRF   FB5
....................    enable_interrupts(INT_EXT2); 
04A8:  BSF    FF0.4
....................    enable_interrupts(GLOBAL); 
04AA:  MOVLW  C0
04AC:  IORWF  FF2,F
....................    ext_int_edge(2,H_TO_L);   //front descendant sur RB2 Interrupt ext 2 
04AE:  BCF    FF1.4
....................  
....................    printf("%c%c",0xfe,0x1); 
04B0:  MOVLW  FE
04B2:  BTFSS  F9E.4
04B4:  BRA    04B2
04B6:  MOVWF  FAD
04B8:  MOVLW  01
04BA:  BTFSS  F9E.4
04BC:  BRA    04BA
04BE:  MOVWF  FAD
....................    printf("%c%c",0xfe,0x85); 
04C0:  MOVLW  FE
04C2:  BTFSS  F9E.4
04C4:  BRA    04C2
04C6:  MOVWF  FAD
04C8:  MOVLW  85
04CA:  BTFSS  F9E.4
04CC:  BRA    04CA
04CE:  MOVWF  FAD
....................    printf("%s","appuyer"); 
04D0:  CLRF   1A
04D2:  MOVF   1A,W
04D4:  RCALL  00F8
04D6:  IORLW  00
04D8:  BZ    04E4
04DA:  INCF   1A,F
04DC:  BTFSS  F9E.4
04DE:  BRA    04DC
04E0:  MOVWF  FAD
04E2:  BRA    04D2
....................    DO 
....................    { 
....................       set_tris_d(0xf0);   //Bit0 à bit3 en entrée et bit 4 à bit7 en sortie 
04E4:  MOVLW  F0
04E6:  MOVWF  F95
....................       output_low(pin_D4);   // mettre la sortie à 0 
04E8:  BCF    F95.4
04EA:  BCF    F8C.4
....................       output_low(pin_D5); 
04EC:  BCF    F95.5
04EE:  BCF    F8C.5
....................       output_low(pin_D6); 
04F0:  BCF    F95.6
04F2:  BCF    F8C.6
....................       output_low(pin_D7); 
04F4:  BCF    F95.7
04F6:  BCF    F8C.7
....................       if(k!='\0') {    
04F8:  MOVF   19,F
04FA:  BZ    0578
....................          printf("%c%c",0xfe,0xc3); 
04FC:  MOVLW  FE
04FE:  BTFSS  F9E.4
0500:  BRA    04FE
0502:  MOVWF  FAD
0504:  MOVLW  C3
0506:  BTFSS  F9E.4
0508:  BRA    0506
050A:  MOVWF  FAD
....................          printf("touche pesee"); 
050C:  CLRF   1A
050E:  MOVF   1A,W
0510:  RCALL  011A
0512:  INCF   1A,F
0514:  MOVWF  00
0516:  MOVF   00,W
0518:  BTFSS  F9E.4
051A:  BRA    0518
051C:  MOVWF  FAD
051E:  MOVLW  0C
0520:  SUBWF  1A,W
0522:  BNZ   050E
....................          printf("%c%c",0xfe,0xd0); 
0524:  MOVLW  FE
0526:  BTFSS  F9E.4
0528:  BRA    0526
052A:  MOVWF  FAD
052C:  MOVLW  D0
052E:  BTFSS  F9E.4
0530:  BRA    052E
0532:  MOVWF  FAD
....................          printf(": %c",k); 
0534:  MOVLW  3A
0536:  BTFSS  F9E.4
0538:  BRA    0536
053A:  MOVWF  FAD
053C:  MOVLW  20
053E:  BTFSS  F9E.4
0540:  BRA    053E
0542:  MOVWF  FAD
0544:  MOVF   19,W
0546:  BTFSS  F9E.4
0548:  BRA    0546
054A:  MOVWF  FAD
....................          delay_ms(100); 
054C:  MOVLW  64
054E:  MOVWF  1A
0550:  BRA    040E
....................          printf("%c%c",0xfe,0x84); 
0552:  MOVLW  FE
0554:  BTFSS  F9E.4
0556:  BRA    0554
0558:  MOVWF  FAD
055A:  MOVLW  84
055C:  BTFSS  F9E.4
055E:  BRA    055C
0560:  MOVWF  FAD
....................          printf("%s","  appuyer    "); 
0562:  CLRF   1A
0564:  MOVF   1A,W
0566:  RCALL  0142
0568:  IORLW  00
056A:  BZ    0576
056C:  INCF   1A,F
056E:  BTFSS  F9E.4
0570:  BRA    056E
0572:  MOVWF  FAD
0574:  BRA    0564
....................          k='\0'; 
0576:  CLRF   19
....................       } 
....................    } while (true); 
.................... } 
0578:  BRA    04E4
....................  
057A:  SLEEP 

Configuration Fuses:
   Word  1: CC3F   IESO FCMEN HS PLL12 CPUDIV4 USBDIV
   Word  2: 0E3F   BROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A5   STVREN NODEBUG LVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
F00000: 04 03 02 01 
