CCS PCH C Compiler, Version 4.104, 5967               24-mars-12 21:08

               Filename: F:\Electro\Programmation\Programmations_PIC_C\243-444-RK\Lab no 3\Partie 3\Matrix Keyboard 3C.lst

               ROM used: 1300 bytes (4%)
                         Largest free fragment is 31464
               RAM used: 38 (2%) at main() level
                         47 (2%) worst case
               Stack:    4 worst case (1 in main + 3 for interrupts)

*
0000:  GOTO   029C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF0.4
004A:  GOTO   0054
004E:  BTFSC  FF0.1
0050:  GOTO   017A
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... //                 Applications des microcontrolleurs               243-444-RK // 
.................... //                         Laboratoire no. 3                                   // 
.................... // Programme no 3: Expérimentation avec clavier matriciel style matrice        // 
.................... // carrée geré par interruptions(point boni).                                  // 
.................... //                                                                             // 
.................... // Ce programme vérifie et compare avec les données mis en mémoires morte.     // 
.................... // Ces mot de passes sont stocker dans un tableau(array) et en appelant        // 
.................... // la fonction read_from_EEPROM() ce mot de passe stocké en EEPROM et mis      // 
.................... // dans une variable pour ensuite la comparer avec la combinaison entré par    // 
.................... // l'utilisateur.                                                              // 
.................... //                                                                             // 
.................... // Une porte ET à quatre entrés est relié entre les broches RD4 et RD7. Dès    // 
.................... // qu'une touche est appuyé, un niveau bas se produit à la sortie de la        // 
.................... // porte ET ce qui à pour effet de causer une interruption EXTERNE             // 
.................... // sur l'entré RB2 qui est reliée à celle-ci.                                  // 
.................... //                                                                             // 
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                             // 
.................... // Copyright@Dany Ferron 2012                                                  // 
.................... //                                                                             // 
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                             // 
.................... //                                                                             // 
.................... //              _________________                                              // 
.................... //            -|1              40|-                                            // 
.................... //            -|                 |-                                            // 
.................... //            -|    PIC18F4550   |-                                            // 
.................... //            -|      @20MHz     |-                                            // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-RB2 This is the port I use for the int_EXT2 // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-RD7                                         // 
.................... //            -|                 |-RD6                                         // 
.................... //            -|                 |-RD5                                         // 
.................... //            -|                 |-RD4                                         // 
.................... //            -|                 |-RC7/RX <-This is the connection to the      // 
.................... //            -|                 |-RC6/TX ->MELabs serial LCD controller       // 
.................... //            -|                 |-                                            // 
.................... //            -|                 |-                                            // 
.................... //         RD0-|                 |-RD3                                         // 
.................... //         RD1-|20             21|-RD2                                         // 
.................... //              -----------------                                              // 
.................... //   => RD0 to RD7 Connex to the Matrix keypad                                 // 
.................... //   => I'm using a 4-way AND gate to provide an interrupt on port RB2.        //  
.................... //                                                                             // 
.................... //                                                                             //  
.................... //                                                                             // 
.................... //                                                                             // 
.................... //                                                                             // 
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... #include "Matrix Keyboard 3C.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES LVP                   	//Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(clock=20000000) 
*
0276:  CLRF   FEA
0278:  MOVLW  25
027A:  MOVWF  FE9
027C:  MOVF   FEF,W
027E:  BZ    029A
0280:  MOVLW  06
0282:  MOVWF  01
0284:  CLRF   00
0286:  DECFSZ 00,F
0288:  BRA    0286
028A:  DECFSZ 01,F
028C:  BRA    0284
028E:  MOVLW  7B
0290:  MOVWF  00
0292:  DECFSZ 00,F
0294:  BRA    0292
0296:  DECFSZ FEF,F
0298:  BRA    0280
029A:  RETLW  00
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #include "CLAVIER16T c-a interruption.c" 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////////////////////// 
.................... ////                           CLAVIER16T c-a interruption.c                  //// 
.................... ////     Clavier matriciel 4x4 gérer par une interruption matérielle          //// 
.................... ////                           Utilise le port D  du 16F4550                  ////  
.................... ////           kbd_getc();         // appelle la fonction                     //// 
.................... ////          char kbd_getc();     // retourne le caractère entrée            //// 
.................... ////                                                                          //// 
.................... ////        Auteur : Paul Bernard                                             //// 
.................... ////                                                                          //// 
.................... ////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #byte kbd = 0xF83                  // adresse du porB= F81h, du porD = F83h 
....................  
.................... // #define constante équivalence elles sont remplacées par leur valeur lors de la compilation 
.................... #define set_tris_kbd(x) set_tris_d(x)      // configuration du port 0=ouput, 1=input 
....................  
.................... #define COL0 (1 << 4)           // COL0=décalage à gauche de 4 bit : 0001 0000 
.................... #define COL1 (1 << 5)           // COL1=décalage à gauche de 5 bit : 0010 0000 
.................... #define COL2 (1 << 6)           // COL2=décalage à gauche de 6 bit : 0100 0000 
.................... #define COL3 (1 << 7)           // COL3=décalage à gauche de 7 bit : 1000 0000 
....................  
.................... #define ROW0 (1 << 0)           // ROW0=décalage à gauche de 0 bit : 0000 0001 
.................... #define ROW1 (1 << 1)           // ROW1=décalage à gauche de 1 bit : 0000 0010    
.................... #define ROW2 (1 << 2)           // ROW2=décalage à gauche de 2 bit : 0000 0100 
.................... #define ROW3 (1 << 3)           // ROW3=décalage à gauche de 3 bit : 0000 1000 
....................  
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3)           // ALL_ROWS=0000 1111 le résultat du OU entre Bits des vars ROWx 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2|COL3)  // ALL_PINS=1111 1111 le résultat du OU entre Bits des vars ROWx et colx 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][4] ={{'1','4','7','a'},    //  déclaration d'un tableau de  
....................                         {'2','5','8','0'},    //  caractères de votre clavier 
....................                         {'3','6','9','b'},    //  ( 4 lignes 4 rangées) 
....................                         {'*','/','-','+'}}; 
.................... char kbd_getc() // retourne le caractère entrée 
.................... {      
....................    
....................    static BYTE col; 
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0';     // la variable=une chaine nulle  
*
00B6:  CLRF   2A
....................    for (col=0;col<5;++col) 
00B8:  CLRF   16
00BA:  MOVF   16,W
00BC:  SUBLW  04
00BE:  BNC   014C
....................    { 
....................       switch (col) // exécute l'instruction selon la valeur de col 
....................       {                                 
00C0:  MOVF   16,W
00C2:  ADDLW  FC
00C4:  BC    00EC
00C6:  ADDLW  04
00C8:  GOTO   0158
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0);   // &~ : ET logique avec le complément 1 de COL0 
00CC:  MOVLW  EF
00CE:  MOVWF  F95
....................                     kbd=~COL0&ALL_PINS;   // Le portB =~ le comp 1 de COL1 ET ALL_PIN 
00D0:  MOVWF  F83
....................                     break;   // On sort de sa structure switch 
00D2:  BRA    00EC
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
00D4:  MOVLW  DF
00D6:  MOVWF  F95
....................                     kbd=~COL1&ALL_PINS; 
00D8:  MOVWF  F83
....................                     break; 
00DA:  BRA    00EC
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
00DC:  MOVLW  BF
00DE:  MOVWF  F95
....................                     kbd=~COL2&ALL_PINS; 
00E0:  MOVWF  F83
....................                     break; 
00E2:  BRA    00EC
....................          case 3   : set_tris_kbd(ALL_PINS&~COL3); 
00E4:  MOVLW  7F
00E6:  MOVWF  F95
....................                     kbd=~COL3&ALL_PINS; 
00E8:  MOVWF  F83
....................                     break; 
00EA:  BRA    00EC
....................       }   
....................       if((kbd & (ALL_ROWS))!=(ALL_ROWS))  // si (le portb ET logique 0000 1111) n'égale pas  0000 1111 
00EC:  MOVF   F83,W
00EE:  ANDLW  0F
00F0:  SUBLW  0F
00F2:  BZ    0148
....................       {   
....................          if((kbd & ROW0)==0)  row=0;   // choix de la rangée 
00F4:  MOVF   F83,W
00F6:  ANDLW  01
00F8:  BNZ   00FE
00FA:  CLRF   2B
....................          else if((kbd & ROW1)==0) row=1; 
00FC:  BRA    0120
00FE:  MOVF   F83,W
0100:  ANDLW  02
0102:  BNZ   010A
0104:  MOVLW  01
0106:  MOVWF  2B
....................          else if((kbd & ROW2)==0) row=2; 
0108:  BRA    0120
010A:  MOVF   F83,W
010C:  ANDLW  04
010E:  BNZ   0116
0110:  MOVLW  02
0112:  MOVWF  2B
....................          else if((kbd & ROW3)==0) row=3; 
0114:  BRA    0120
0116:  MOVF   F83,W
0118:  ANDLW  08
011A:  BNZ   0120
011C:  MOVLW  03
011E:  MOVWF  2B
....................          kchar=KEYS[row][col-1]; 
0120:  MOVF   2B,W
0122:  MULLW  04
0124:  MOVF   FF3,W
0126:  CLRF   2D
0128:  MOVWF  2C
012A:  MOVLW  01
012C:  SUBWF  16,W
012E:  CLRF   03
0130:  ADDWF  2C,W
0132:  MOVWF  01
0134:  MOVF   2D,W
0136:  ADDWFC 03,F
0138:  MOVF   01,W
013A:  MOVFF  FF2,2C
013E:  BCF    FF2.7
0140:  RCALL  0096
0142:  BTFSC  2C.7
0144:  BSF    FF2.7
0146:  MOVWF  2A
....................                   
....................       } 
....................    } 
0148:  INCF   16,F
014A:  BRA    00BA
....................    set_tris_kbd(ALL_PINS);   // configuration du portB en I/O selon la variable ALL_PINS   
014C:  MOVLW  FF
014E:  MOVWF  F95
....................     
....................    return(kchar); 
0150:  MOVFF  2A,01
.................... } 
0154:  GOTO   017C (RETURN)
....................  
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... // Le début de l'addresse mémoire commence à 0xF00000: Il est à noté qu'il faut//  
.................... // spécifier au compilateur quel est le type de variable, par défault il       // 
.................... // stock en mémoire un integer d'une longueur de 16 bits. Donc pas pratique si //   
.................... // l'on veux lire et stocker un octet à la fois.                               // 
.................... ///////////////////////////////////////////////////////////////////////////////// 
.................... #rom int8 0xF00000={'9','8','7','6'} // Code de déverrouillage. 
....................  
.................... // Définition et initialisation des variables servant au stockage de mot de passe  
.................... // en EEPROM. 
.................... #define PASSWORD_LENGTH 4 
.................... char password[PASSWORD_LENGTH] = {}; 
....................  
.................... // Variable de mémorisation des touches de clavier retournés par la fonction  
.................... // kbd_getc(); 
.................... char k; 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // L'appui d'une touche provoque un interruption du programme principal.      // 
.................... // En mettant au niveau bas les rangées et les colonnes, on identifie quelle  // 
.................... // touche est pesée en effectuant un OU logique et la fonction appelée par    // 
.................... // l'interruption retourne la valeur de la touche appuyée.                    // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... #int_EXT2 // Utilisation de l'interruption EXT2 cablé sur le portB bit 2. 
.................... void EXT2_isr(void)  
....................    {   
....................     k=kbd_getc(); 
*
017A:  BRA    00B6
017C:  MOVFF  01,1B
....................    } 
.................... // Déclaration de la fonction de lecture du mot de passe stocké en mémoire morte.   
0180:  BCF    FF0.1
0182:  GOTO   0054
.................... char read_from_EEPROM(int8 adr); 
....................  
.................... //////////////////////////// Programme principal./////////////////////////////// 
.................... void main()  
....................    { 
*
029C:  CLRF   FF8
029E:  BCF    FD0.7
02A0:  BSF    07.7
02A2:  CLRF   FEA
02A4:  CLRF   FE9
02A6:  BSF    FB8.3
02A8:  MOVLW  08
02AA:  MOVWF  FAF
02AC:  MOVLW  02
02AE:  MOVWF  FB0
02B0:  MOVLW  A6
02B2:  MOVWF  FAC
02B4:  MOVLW  90
02B6:  MOVWF  FAB
02B8:  MOVF   FC1,W
02BA:  ANDLW  C0
02BC:  IORLW  0F
02BE:  MOVWF  FC1
02C0:  MOVLW  07
02C2:  MOVWF  FB4
02C4:  CLRF   16
02C6:  CLRF   17
02C8:  CLRF   18
02CA:  CLRF   19
02CC:  CLRF   1A
02CE:  BCF    1C.0
02D0:  CLRF   1D
*
02DA:  CLRF   22
....................     // Variables servant à la lecture du code entré par l'utilisateur. 
....................     int1 passwordValid=false; 
....................     int8 inputCount=0; 
....................     char userInput[PASSWORD_LENGTH] = {}; 
*
02D2:  CLRF   1E
02D4:  CLRF   1F
02D6:  CLRF   20
02D8:  CLRF   21
....................     int8 j=0; 
....................      
....................     // Variable servant à définir la position du curseur de l'afficheur. 
....................     int8 adr; 
....................      
....................     // Initialisation des interruptions. 
....................     enable_interrupts(int_EXT2); 
*
02DC:  BSF    FF0.4
....................     enable_interrupts(GLOBAL); 
02DE:  MOVLW  C0
02E0:  IORWF  FF2,F
....................     ext_int_edge(2,H_TO_L);// Front descendant sur RB2 Interrupt ext 2 
02E2:  BCF    FF1.4
....................      
....................     //Initialisation de l'affichage. 
....................     printf("%c%c",0xfe,0x1); 
02E4:  MOVLW  FE
02E6:  BTFSS  F9E.4
02E8:  BRA    02E6
02EA:  MOVWF  FAD
02EC:  MOVLW  01
02EE:  BTFSS  F9E.4
02F0:  BRA    02EE
02F2:  MOVWF  FAD
....................     printf("%c%c",0xfe,0x81); 
02F4:  MOVLW  FE
02F6:  BTFSS  F9E.4
02F8:  BRA    02F6
02FA:  MOVWF  FAD
02FC:  MOVLW  81
02FE:  BTFSS  F9E.4
0300:  BRA    02FE
0302:  MOVWF  FAD
....................     printf("Entrez votre code"); 
0304:  MOVLW  86
0306:  MOVWF  FF6
0308:  MOVLW  01
030A:  MOVWF  FF7
030C:  RCALL  0206
....................      
....................     adr=0xc7;// Adresse de retour pour le curseur. 
030E:  MOVLW  C7
0310:  MOVWF  23
....................      
....................     do 
....................      { 
....................       // Initialisation du port pour la lecture du clavier 
....................       set_tris_d(0x0f);//Bit0 à bit3 en entrée et bit 4 à bit7 en sortie 
0312:  MOVLW  0F
0314:  MOVWF  F95
....................       output_low(pin_D4); 
0316:  BCF    F95.4
0318:  BCF    F8C.4
....................       output_low(pin_D5); 
031A:  BCF    F95.5
031C:  BCF    F8C.5
....................       output_low(pin_D6); 
031E:  BCF    F95.6
0320:  BCF    F8C.6
....................       output_low(pin_D7); 
0322:  BCF    F95.7
0324:  BCF    F8C.7
....................       // L'appel de cette fonction lit le code qui est en EEPROM à la premiere 
....................       // case d'adresse mémoire disponible dans le Micro controlleur. 
....................       read_from_EEPROM(0x00);  
0326:  CLRF   24
0328:  BRA    0228
....................                
....................       if(k!='\0') // Si une touche est appuyée, donc si interruption 
032A:  MOVF   1B,F
032C:  BZ    0392
....................         { 
....................          printf("%c%c",0xfe,adr); 
032E:  MOVLW  FE
0330:  BTFSS  F9E.4
0332:  BRA    0330
0334:  MOVWF  FAD
0336:  MOVF   23,W
0338:  BTFSS  F9E.4
033A:  BRA    0338
033C:  MOVWF  FAD
....................          printf("%c",k); 
033E:  MOVF   1B,W
0340:  BTFSS  F9E.4
0342:  BRA    0340
0344:  MOVWF  FAD
....................          delay_ms(300); // Delai servant de fonction anti-rebond(DEBOUNCE) 
0346:  MOVLW  02
0348:  MOVWF  24
034A:  MOVLW  96
034C:  MOVWF  25
034E:  RCALL  0276
0350:  DECFSZ 24,F
0352:  BRA    034A
....................          printf("%c%c",0xfe,adr); 
0354:  MOVLW  FE
0356:  BTFSS  F9E.4
0358:  BRA    0356
035A:  MOVWF  FAD
035C:  MOVF   23,W
035E:  BTFSS  F9E.4
0360:  BRA    035E
0362:  MOVWF  FAD
....................          printf("*"); // Cache le caractère entré par l'utilisateur. 
0364:  MOVLW  2A
0366:  BTFSS  F9E.4
0368:  BRA    0366
036A:  MOVWF  FAD
....................          delay_ms(200);  
036C:  MOVLW  C8
036E:  MOVWF  25
0370:  RCALL  0276
....................          // Incrémentation de l'addresse de la position du curseur pour la  
....................          // prochaine touche entrée par l'utilisateur. 
....................          adr++;  
0372:  INCF   23,F
....................          // Vérification du nombre d'appuis par l'utilisateur. 
....................          if(inputCount<PASSWORD_LENGTH) 
0374:  MOVF   1D,W
0376:  SUBLW  03
0378:  BNC   038E
....................            { 
....................             userInput[inputCount]=k; 
037A:  CLRF   03
037C:  MOVF   1D,W
037E:  ADDLW  1E
0380:  MOVWF  FE9
0382:  MOVLW  00
0384:  ADDWFC 03,W
0386:  MOVWF  FEA
0388:  MOVFF  1B,FEF
....................             inputCount++; 
038C:  INCF   1D,F
....................            } 
....................          // On s'assure de remettre une valeur NULL à la variable de lecture. 
....................          k='\0';  
038E:  CLRF   1B
....................         } 
....................       // La validation du nombre de touche appuyées se fait ici.   
....................       else if(inputCount==PASSWORD_LENGTH) 
0390:  BRA    0514
0392:  MOVF   1D,W
0394:  SUBLW  04
0396:  BTFSS  FD8.2
0398:  BRA    0514
....................          { 
....................           passwordValid=true; 
039A:  BSF    1C.0
....................           
....................          for(j=0;j<PASSWORD_LENGTH;j++) 
039C:  CLRF   22
039E:  MOVF   22,W
03A0:  SUBLW  03
03A2:  BTFSS  FD8.0
03A4:  BRA    048E
....................            { 
....................             // On compare le code entré par l'utilisateur avec le mot de passe 
....................             // qui à été lut auparavant par la fonction read_from_EEPROM(). 
....................             if(userInput[j]!=password[j])  
03A6:  CLRF   03
03A8:  MOVF   22,W
03AA:  ADDLW  1E
03AC:  MOVWF  FE9
03AE:  MOVLW  00
03B0:  ADDWFC 03,W
03B2:  MOVWF  FEA
03B4:  MOVFF  FEF,24
03B8:  CLRF   03
03BA:  MOVF   22,W
03BC:  ADDLW  17
03BE:  MOVWF  FE9
03C0:  MOVLW  00
03C2:  ADDWFC 03,W
03C4:  MOVWF  FEA
03C6:  MOVF   FEF,W
03C8:  SUBWF  24,W
03CA:  BZ    0478
....................              { 
....................               passwordValid=false; 
03CC:  BCF    1C.0
....................               printf("%c%c",0xfe,0x1); 
03CE:  MOVLW  FE
03D0:  BTFSS  F9E.4
03D2:  BRA    03D0
03D4:  MOVWF  FAD
03D6:  MOVLW  01
03D8:  BTFSS  F9E.4
03DA:  BRA    03D8
03DC:  MOVWF  FAD
....................               printf("%c%c",0xfe,0x97); 
03DE:  MOVLW  FE
03E0:  BTFSS  F9E.4
03E2:  BRA    03E0
03E4:  MOVWF  FAD
03E6:  MOVLW  97
03E8:  BTFSS  F9E.4
03EA:  BRA    03E8
03EC:  MOVWF  FAD
....................               printf("Votre code est"); 
03EE:  MOVLW  98
03F0:  MOVWF  FF6
03F2:  MOVLW  01
03F4:  MOVWF  FF7
03F6:  RCALL  0206
....................               printf("%c%c",0xfe,0xd9); 
03F8:  MOVLW  FE
03FA:  BTFSS  F9E.4
03FC:  BRA    03FA
03FE:  MOVWF  FAD
0400:  MOVLW  D9
0402:  BTFSS  F9E.4
0404:  BRA    0402
0406:  MOVWF  FAD
....................               printf("incorrect!"); 
0408:  MOVLW  A8
040A:  MOVWF  FF6
040C:  MOVLW  01
040E:  MOVWF  FF7
0410:  RCALL  0206
....................               delay_ms(500); 
0412:  MOVLW  02
0414:  MOVWF  24
0416:  MOVLW  FA
0418:  MOVWF  25
041A:  RCALL  0276
041C:  DECFSZ 24,F
041E:  BRA    0416
....................               printf("%c%c",0xfe,0x1); 
0420:  MOVLW  FE
0422:  BTFSS  F9E.4
0424:  BRA    0422
0426:  MOVWF  FAD
0428:  MOVLW  01
042A:  BTFSS  F9E.4
042C:  BRA    042A
042E:  MOVWF  FAD
....................               printf("%c%c",0xfe,0xd5); 
0430:  MOVLW  FE
0432:  BTFSS  F9E.4
0434:  BRA    0432
0436:  MOVWF  FAD
0438:  MOVLW  D5
043A:  BTFSS  F9E.4
043C:  BRA    043A
043E:  MOVWF  FAD
....................               printf("Veuillez reessayer"); 
0440:  MOVLW  B4
0442:  MOVWF  FF6
0444:  MOVLW  01
0446:  MOVWF  FF7
0448:  RCALL  0206
....................               printf("%c%c",0xfe,0x1); 
044A:  MOVLW  FE
044C:  BTFSS  F9E.4
044E:  BRA    044C
0450:  MOVWF  FAD
0452:  MOVLW  01
0454:  BTFSS  F9E.4
0456:  BRA    0454
0458:  MOVWF  FAD
....................               printf("%c%c",0xfe,0x81); 
045A:  MOVLW  FE
045C:  BTFSS  F9E.4
045E:  BRA    045C
0460:  MOVWF  FAD
0462:  MOVLW  81
0464:  BTFSS  F9E.4
0466:  BRA    0464
0468:  MOVWF  FAD
....................               printf("Entrez votre code"); 
046A:  MOVLW  C8
046C:  MOVWF  FF6
046E:  MOVLW  01
0470:  MOVWF  FF7
0472:  RCALL  0206
....................               adr=0xc7; 
0474:  MOVLW  C7
0476:  MOVWF  23
....................              } 
....................             // On remet la chaine entrée par l'utilisateur a NULL pour  
....................             // un autre essai. 
....................             userInput[j]='0';  
0478:  CLRF   03
047A:  MOVF   22,W
047C:  ADDLW  1E
047E:  MOVWF  FE9
0480:  MOVLW  00
0482:  ADDWFC 03,W
0484:  MOVWF  FEA
0486:  MOVLW  30
0488:  MOVWF  FEF
....................            } 
048A:  INCF   22,F
048C:  BRA    039E
....................          // On remet la variable de touche appuyée par l'utilisateur à 0 une 
....................          // fois que les 4 touches on été validées. 
....................          inputCount=0; 
048E:  CLRF   1D
....................           
....................          if(passwordValid==true) 
0490:  BTFSS  1C.0
0492:  BRA    0514
....................           { 
....................            printf("%c%c",0xfe,0x1); 
0494:  MOVLW  FE
0496:  BTFSS  F9E.4
0498:  BRA    0496
049A:  MOVWF  FAD
049C:  MOVLW  01
049E:  BTFSS  F9E.4
04A0:  BRA    049E
04A2:  MOVWF  FAD
....................            printf("%c%c",0xfe,0x97); 
04A4:  MOVLW  FE
04A6:  BTFSS  F9E.4
04A8:  BRA    04A6
04AA:  MOVWF  FAD
04AC:  MOVLW  97
04AE:  BTFSS  F9E.4
04B0:  BRA    04AE
04B2:  MOVWF  FAD
....................            printf("Votre code est"); 
04B4:  MOVLW  DA
04B6:  MOVWF  FF6
04B8:  MOVLW  01
04BA:  MOVWF  FF7
04BC:  RCALL  0206
....................            printf("%c%c",0xfe,0xdb); 
04BE:  MOVLW  FE
04C0:  BTFSS  F9E.4
04C2:  BRA    04C0
04C4:  MOVWF  FAD
04C6:  MOVLW  DB
04C8:  BTFSS  F9E.4
04CA:  BRA    04C8
04CC:  MOVWF  FAD
....................            printf("correct!"); 
04CE:  MOVLW  EA
04D0:  MOVWF  FF6
04D2:  MOVLW  01
04D4:  MOVWF  FF7
04D6:  RCALL  0206
....................            delay_ms(1000); 
04D8:  MOVLW  04
04DA:  MOVWF  24
04DC:  MOVLW  FA
04DE:  MOVWF  25
04E0:  RCALL  0276
04E2:  DECFSZ 24,F
04E4:  BRA    04DC
....................            printf("%c%c",0xfe,0x1); 
04E6:  MOVLW  FE
04E8:  BTFSS  F9E.4
04EA:  BRA    04E8
04EC:  MOVWF  FAD
04EE:  MOVLW  01
04F0:  BTFSS  F9E.4
04F2:  BRA    04F0
04F4:  MOVWF  FAD
....................            printf("%c%c",0xfe,0x81); 
04F6:  MOVLW  FE
04F8:  BTFSS  F9E.4
04FA:  BRA    04F8
04FC:  MOVWF  FAD
04FE:  MOVLW  81
0500:  BTFSS  F9E.4
0502:  BRA    0500
0504:  MOVWF  FAD
....................            printf("Entrez votre code"); 
0506:  MOVLW  F4
0508:  MOVWF  FF6
050A:  MOVLW  01
050C:  MOVWF  FF7
050E:  RCALL  0206
....................            adr=0xc7; 
0510:  MOVLW  C7
0512:  MOVWF  23
....................           } 
....................          } 
....................       }  
....................     while(true); 
....................    } 
0514:  BRA    0312
.................... ///////////////////////Fin du programme principal.////////////////////////////// 
....................  
.................... // Cette fonction lit et retourne le code qui est en EEPROM. 
.................... char read_from_EEPROM(int8 adr) 
....................    {  
0516:  SLEEP 
....................     int8 i; 
....................      
....................     for(i=0;i<PASSWORD_LENGTH;i++)  
*
0228:  CLRF   25
022A:  MOVF   25,W
022C:  SUBLW  03
022E:  BNC   0260
....................        { 
....................         password[i]=read_eeprom(i+adr); 
0230:  CLRF   03
0232:  MOVF   25,W
0234:  ADDLW  17
0236:  MOVWF  FE9
0238:  MOVLW  00
023A:  ADDWFC 03,W
023C:  MOVWF  FEA
023E:  MOVF   24,W
0240:  ADDWF  25,W
0242:  MOVWF  28
0244:  MOVFF  FF2,29
0248:  BCF    FF2.7
024A:  MOVFF  28,FA9
024E:  BCF    FA6.6
0250:  BCF    FA6.7
0252:  BSF    FA6.0
0254:  MOVF   FA8,W
0256:  BTFSC  29.7
0258:  BSF    FF2.7
025A:  MOVWF  FEF
....................        }   
025C:  INCF   25,F
025E:  BRA    022A
.................... return password[i];   
0260:  CLRF   03
0262:  MOVF   25,W
0264:  ADDLW  17
0266:  MOVWF  FE9
0268:  MOVLW  00
026A:  ADDWFC 03,W
026C:  MOVWF  FEA
026E:  MOVFF  FEF,01
....................    } 
0272:  GOTO   032A (RETURN)
....................  
....................        

Configuration Fuses:
   Word  1: CC3F   IESO FCMEN HS PLL12 CPUDIV4 USBDIV
   Word  2: 0E3F   BROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A5   STVREN NODEBUG LVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

ROM data:
F00000: 39 38 37 36 
